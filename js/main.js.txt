<script type="module">
        // v0.292b (Hot Fix)
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updatePassword, EmailAuthProvider, reauthenticateWithCredential, deleteUser } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, addDoc, setDoc, deleteDoc, onSnapshot, query, serverTimestamp, getDocs, writeBatch, updateDoc, arrayUnion, where, increment } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- PASO 1: CONFIGURACIÓN PERSONAL ---
        const firebaseConfig = {
             // NOTE: Replace with your actual Firebase config
            apiKey: "AIzaSyC3OUQBy8VpjDCBllgsCGu3sDQoGO-G8w0",
            authDomain: "betasegui-8cdaa.firebaseapp.com",
            projectId: "betasegui-8cdaa",
            storageBucket: "betasegui-8cdaa.firebasestorage.app",
            messagingSenderId: "995668670252",
            appId: "1:995668670252:web:0aa68d85263ce46354de89"
        };
        
        // --- FIN DE LA CONFIGURACIÓN ---

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        let userId = null;
        let salasUnsubscribe = null;
        let ciclosUnsubscribe = null;
        let logsUnsubscribe = null;
        let geneticsUnsubscribe = null;
        let seedsUnsubscribe = null;
        let currentSalas = [];
        let currentCiclos = [];
        let currentGenetics = [];
        let currentSeeds = [];
        let currentSalaId = null; // Used to know where to return to
        let currentSalaName = null; // Used to know where to return to
        let confirmCallback = null; // To store the action for the confirmation modal
        let mainAppListenersInitialized = false;

        // --- DOM ELEMENT GETTER ---
        const getEl = (id) => document.getElementById(id);

        let notificationTimeout;

        function showNotification(message, type = 'success') {
            const container = getEl('notification-container');
            if (!container) return;

            if (notificationTimeout) {
                clearTimeout(notificationTimeout);
            }

            container.textContent = message;
            container.className = type; // 'success' o 'error'
            container.style.display = 'block';

            notificationTimeout = setTimeout(() => {
                container.style.display = 'none';
            }, 4000); // Se oculta después de 4 segundos
        }

        // --- AUTHENTICATION & VIEW MANAGEMENT ---
        onAuthStateChanged(auth, user => {
            if (user) {
                if (user.isAnonymous) {
                    signOut(auth);
                    return; 
                }
                
                userId = user.uid;
                getEl('authView').classList.add('hidden');
                getEl('app').classList.remove('hidden');
                getEl('welcomeUser').innerText = `Anota todo, no seas pancho.`;

                if (!mainAppListenersInitialized) {
                    initializeAppEventListeners();
                    mainAppListenersInitialized = true;
                }

                loadSalas();
                loadCiclos();
                loadGenetics();
                loadSeeds();
            } else {
                userId = null;
                if(salasUnsubscribe) salasUnsubscribe();
                if(ciclosUnsubscribe) ciclosUnsubscribe();
                if(geneticsUnsubscribe) geneticsUnsubscribe();
                if(seedsUnsubscribe) seedsUnsubscribe();
                getEl('authView').classList.remove('hidden');
                getEl('app').classList.add('hidden');
                getEl('ciclosView').classList.add('hidden');
                getEl('cicloDetailView').classList.add('hidden');
                getEl('toolsView').classList.add('hidden');
                getEl('settingsView').classList.add('hidden');
                mainAppListenersInitialized = false; // Reset flag on logout
            }
        });

        const handleAuthError = (error) => {
            switch (error.code) {
                case 'auth/invalid-email': return 'El formato del email no es válido.';
                case 'auth/user-not-found':
                case 'auth/wrong-password': return 'Email o contraseña incorrectos.';
                case 'auth/email-already-in-use': return 'Este email ya está registrado.';
                case 'auth/weak-password': return 'La contraseña debe tener al menos 6 caracteres.';
                default: return 'Ocurrió un error. Inténtalo de nuevo.';
            }
        };

        // --- AUTH VIEW LISTENERS (Always safe to attach) ---
        getEl('loginForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const email = getEl('login-email').value;
            const password = getEl('login-password').value;
            signInWithEmailAndPassword(auth, email, password)
                .catch(error => {
                    getEl('authError').innerText = handleAuthError(error);
                    getEl('authError').classList.remove('hidden');
                });
        });

        getEl('registerForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const email = getEl('register-email').value;
            const password = getEl('register-password').value;
            createUserWithEmailAndPassword(auth, email, password)
                .catch(error => {
                    getEl('authError').innerText = handleAuthError(error);
                    getEl('authError').classList.remove('hidden');
                });
        });
        
        getEl('showRegister').addEventListener('click', (e) => {
            e.preventDefault();
            getEl('loginForm').classList.add('hidden');
            getEl('registerForm').classList.remove('hidden');
            getEl('authError').classList.add('hidden');
        });

        getEl('showLogin').addEventListener('click', (e) => {
            e.preventDefault();
            getEl('registerForm').classList.add('hidden');
            getEl('loginForm').classList.remove('hidden');
            getEl('authError').classList.add('hidden');
        });

        getEl('aboutBtnAuth').addEventListener('click', () => getEl('aboutModal').style.display = 'flex');
        getEl('aboutBtnAuthRegister').addEventListener('click', () => getEl('aboutModal').style.display = 'flex');
        getEl('closeAboutBtn').addEventListener('click', () => getEl('aboutModal').style.display = 'none');
        
        // --- HELPERS ---

        /**
         * Calcula los días transcurridos desde una fecha de inicio hasta hoy.
         * @param {string} startDateString - La fecha de inicio en formato "YYYY-MM-DD".
         * @returns {number|null} El número de días transcurridos (Día 1, Día 2, etc.).
         */
        function calculateDaysSince(startDateString) {
            if (!startDateString) return null;
            
            const start = new Date(startDateString + 'T00:00:00Z');
            if (isNaN(start.getTime())) return null;

            const today = new Date();
            const todayUTC = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate()));

            if (start > todayUTC) return 0;

            const diffTime = todayUTC - start;
            const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
            
            return diffDays + 1;
        }

        function getPhaseInfo(phaseName) {
            switch(phaseName) {
                case 'PRE-FLORA': return { name: 'PRE-FLORA', color: 'bg-purple-600', class: 'pre-flora' };
                case 'FLORA': return { name: 'FLORA', color: 'bg-pink-600', class: 'flora' };
                case 'MADURACION': return { name: 'MADURACION', color: 'bg-orange-600', class: 'maduracion' };
                case 'LAVADO': return { name: 'LAVADO', color: 'bg-blue-600', class: 'lavado' };
                case 'SECADO': return { name: 'SECADO', color: 'bg-yellow-600 text-black', class: 'secado' };
                default: return { name: 'Finalizado', color: 'bg-gray-500', class: 'finalizado' };
            }
        }

        function generateStandardWeeks() {
            const weeks = [];
            for (let i = 1; i <= 10; i++) {
                let phaseName;
                if (i <= 3) phaseName = 'PRE-FLORA';
                else if (i <= 6) phaseName = 'FLORA';
                else if (i <= 8) phaseName = 'MADURACION';
                else if (i === 9) phaseName = 'LAVADO';
                else if (i === 10) phaseName = 'SECADO';
                weeks.push({ weekNumber: i, phaseName });
            }
            return weeks;
        }

        // --- DATA LOADING & RENDERING ---
        
        function loadSalas() {
            if (!userId) return;
            getEl('loadingSalas').style.display = 'block';
            getEl('emptySalasState').style.display = 'none';

            const salasRef = collection(db, `users/${userId}/salas`);
            const q = query(salasRef);

            if (salasUnsubscribe) salasUnsubscribe();
            salasUnsubscribe = onSnapshot(q, (snapshot) => {
                currentSalas = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderSalasGrid();
            }, error => {
                console.error("Error loading salas:", error);
                getEl('loadingSalas').innerText = "Error al cargar las salas.";
            });
        }
        
        function loadCiclos() {
            if (!userId) return;
            const ciclosRef = collection(db, `users/${userId}/ciclos`);
            const q = query(ciclosRef);

            if (ciclosUnsubscribe) ciclosUnsubscribe();
            ciclosUnsubscribe = onSnapshot(q, (snapshot) => {
                currentCiclos = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                
                renderSalasGrid(); 

                if (!getEl('ciclosView').classList.contains('hidden')) {
                    showCiclosView(currentSalaId, currentSalaName);
                }
                
                if (!getEl('cicloDetailView').classList.contains('hidden')) {
                    const activeCicloId = getEl('cicloDetailContent').querySelector('[data-ciclo-id]')?.dataset.cicloId;
                    if (activeCicloId) {
                        const updatedCiclo = currentCiclos.find(c => c.id === activeCicloId);
                        if (updatedCiclo) {
                            showCicloDetails(updatedCiclo);
                        } else {
                            hideCicloDetails();
                        }
                    }
                }
            });
        }
        
        function renderSalasGrid() {
            const salasGrid = getEl('salasGrid');
            if (!salasGrid) return;
            getEl('loadingSalas').style.display = 'none';
            salasGrid.innerHTML = '';
            if (currentSalas.length === 0) {
                getEl('emptySalasState').style.display = 'block';
                return;
            }
            getEl('emptySalasState').style.display = 'none';

            currentSalas.forEach(sala => {
                const ciclosInSala = currentCiclos.filter(c => c.salaId === sala.id);
                const activeCiclos = ciclosInSala.filter(c => c.phase !== 'Finalizado');

                const salaCard = document.createElement('div');
                salaCard.className = 'card rounded-xl p-5 flex flex-col justify-between aspect-square';
                salaCard.dataset.salaId = sala.id;
                
                let ciclosPreviewHTML = '';
                if (activeCiclos.length > 0) {
                    const listHTML = activeCiclos.map(c => {
                        let phaseClass = 'vege';
                        if (c.phase === 'Floración' && c.floweringStartDate && c.floweringWeeks) {
                            const diffDays = calculateDaysSince(c.floweringStartDate);
                            if (diffDays !== null && diffDays > 0) {
                                const currentWeek = Math.floor((diffDays -1) / 7) + 1;
                                const weekData = c.floweringWeeks.find(w => w.weekNumber === currentWeek);
                                if (weekData) {
                                    phaseClass = getPhaseInfo(weekData.phaseName).class;
                                }
                            }
                        }
                        return `<div class="ciclo-item ${phaseClass}">${c.name}</div>`;
                    }).join('');
                    ciclosPreviewHTML = `<div class="ciclos-list">${listHTML}</div>`;
                } else {
                    ciclosPreviewHTML = '<p class="text-sm text-gray-500">Sala vacía</p>';
                }

                salaCard.innerHTML = `
                    <div class="flex-grow flex flex-col">
                        <h3 class="text-2xl font-bold text-white">${sala.name}</h3>
                        <p class="text-gray-400 mb-4">${activeCiclos.length} ciclo(s) activo(s)</p>
                        <div class="flex-grow relative overflow-hidden">${ciclosPreviewHTML}</div>
                    </div>
                    <div class="flex justify-end gap-2 mt-4">
                        <button data-action="edit-sala" class="btn-secondary p-2 rounded-lg transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L14.732 3.732z" /></svg>
                        </button>
                        <button data-action="delete-sala" class="btn-danger p-2 rounded-lg transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                        </button>
                    </div>
                `;
                salaCard.addEventListener('click', (e) => {
                    if (e.target.closest('button')) return;
                    showCiclosView(sala.id, sala.name);
                });
                salaCard.querySelector('[data-action="edit-sala"]').addEventListener('click', (e) => {
                    e.stopPropagation();
                    openSalaModal(sala);
                });
                salaCard.querySelector('[data-action="delete-sala"]').addEventListener('click', (e) => {
                    e.stopPropagation();
                    deleteSala(sala.id, sala.name);
                });
                salasGrid.appendChild(salaCard);
            });
        }

        function createCicloCard(ciclo) {
            const card = document.createElement('div');
            card.className = 'card rounded-xl p-5 flex flex-col justify-between';
            
            const phaseColor = ciclo.phase === 'Floración' ? 'bg-pink-500' : 'bg-green-500';
            const phaseText = ciclo.phase;
            const typeText = ciclo.cultivationType || 'Sustrato';
            const typeColor = typeText === 'Hidroponia' ? 'bg-blue-500' : 'bg-yellow-600';

            let statusInfo = '';
            if (ciclo.phase === 'Floración') {
                const diffDays = calculateDaysSince(ciclo.floweringStartDate);
                if (diffDays !== null && diffDays > 0) {
                    const currentWeek = Math.floor((diffDays - 1) / 7) + 1;
                    const totalWeeks = ciclo.floweringWeeks ? ciclo.floweringWeeks.length : 10;
                    statusInfo = `<p class="text-sm text-gray-300 mt-1">Día ${diffDays} (Semana ${currentWeek} / ${totalWeeks})</p>`;
                }
            } else if (ciclo.phase === 'Vegetativo') {
                const diffDays = calculateDaysSince(ciclo.vegetativeStartDate);
                if (diffDays !== null && diffDays > 0) {
                    const currentWeek = Math.floor((diffDays - 1) / 7) + 1;
                    statusInfo = `<p class="text-sm text-gray-300 mt-1">Día ${diffDays} (Semana ${currentWeek}) de vegetativo</p>`;
                }
            }

            card.innerHTML = `
                <div>
                    <div class="flex justify-between items-start">
                        <h3 class="text-xl font-bold text-white">${ciclo.name}</h3>
                        <div class="flex flex-col items-end gap-2">
                           <span class="text-xs font-semibold px-2.5 py-1 rounded-full ${phaseColor} text-white">${phaseText}</span>
                           <span class="text-xs font-semibold px-2.5 py-1 rounded-full ${typeColor} text-white">${typeText}</span>
                        </div>
                    </div>
                    ${statusInfo}
                </div>
                <div class="mt-6 flex gap-2 justify-end">
                    <button data-action="move-ciclo" data-id="${ciclo.id}" class="btn-secondary p-2 rounded-lg transition" title="Mover Ciclo">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" /></svg>
                    </button>
                    <button data-action="edit-ciclo" data-id="${ciclo.id}" class="btn-secondary p-2 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L14.732 3.732z" /></svg>
                    </button>
                    <button data-action="delete-ciclo" data-id="${ciclo.id}" class="btn-danger p-2 rounded-lg transition">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                    </button>
                    <button data-action="view-details" data-id="${ciclo.id}" class="btn-primary flex-grow font-semibold py-2 px-3 rounded-lg text-sm transition">Ver Detalles</button>
                </div>
            `;
            
            const cicloData = currentCiclos.find(c => c.id === ciclo.id);
            card.querySelector('[data-action="edit-ciclo"]').addEventListener('click', () => openCicloModal(cicloData));
            card.querySelector('[data-action="delete-ciclo"]').addEventListener('click', () => deleteCiclo(ciclo.id, ciclo.name));
            card.querySelector('[data-action="view-details"]').addEventListener('click', () => showCicloDetails(cicloData));
            card.querySelector('[data-action="move-ciclo"]').addEventListener('click', (e) => {
                e.stopPropagation();
                openMoveCicloModal(ciclo.id);
            });

            return card;
        }

        // --- SALA & CICLO MANAGEMENT ---
        
        function openSalaModal(sala = null) {
            getEl('salaForm').reset();
            getEl('salaIdInput').value = sala ? sala.id : '';
            getEl('salaModalTitle').innerText = sala ? 'Editar Sala' : 'Añadir Nueva Sala';
            if(sala) {
                getEl('salaName').value = sala.name;
            }
            getEl('salaModal').style.display = 'flex';
        }

        async function handleSalaFormSubmit(e) {
            e.preventDefault();
            const id = getEl('salaIdInput').value;
            const name = getEl('salaName').value.trim();
            if (!name) return;

            const data = { name: name };
            
            try {
                if (id) {
                    await updateDoc(doc(db, `users/${userId}/salas`, id), data);
                } else {
                    await addDoc(collection(db, `users/${userId}/salas`), data);
                }
                getEl('salaModal').style.display = 'none';
                showNotification("Sala guardada con éxito.", "success");
            } catch (error) {
                console.error("Error saving sala:", error);
                showNotification("No se pudo guardar la sala.", "error");
            }
        }

        function deleteSala(id, name) {
            const ciclosInSala = currentCiclos.filter(c => c.salaId === id);
            if (ciclosInSala.length > 0) {
                showNotification(`No se puede eliminar la sala "${name}" porque contiene ciclos.`, "error");
                return;
            }
            
            showConfirmationModal(`¿Estás seguro de que quieres eliminar la sala "${name}"?`, async () => {
                try {
                    await deleteDoc(doc(db, `users/${userId}/salas`, id));
                    showNotification("Sala eliminada.", "success");
                } catch (error) {
                    console.error("Error deleting sala:", error);
                    showNotification("No se pudo eliminar la sala.", "error");
                }
            });
        }

        function openCicloModal(ciclo = null) {
            getEl('cicloForm').reset();
            getEl('cicloIdInput').value = ciclo ? ciclo.id : '';
            getEl('cicloModalTitle').innerText = ciclo ? 'Editar Ciclo' : 'Añadir Nuevo Ciclo';
            
            const salaSelect = getEl('cicloSala');
            salaSelect.innerHTML = '';
            if (currentSalas.length === 0) {
                salaSelect.innerHTML = '<option value="">Primero debes crear una sala</option>';
            } else {
                currentSalas.forEach(s => {
                    const option = document.createElement('option');
                    option.value = s.id;
                    option.innerText = s.name;
                    if ((ciclo && ciclo.salaId === s.id) || (!ciclo && s.id === currentSalaId)) {
                        option.selected = true;
                    }
                    salaSelect.appendChild(option);
                });
            }

            if (ciclo) {
                getEl('cicloName').value = ciclo.name;
                getEl('cicloPhase').value = ciclo.phase;
                getEl('cicloVegetativeStartDate').value = ciclo.vegetativeStartDate || '';
                getEl('cicloFloweringStartDate').value = ciclo.floweringStartDate || '';
            } else {
                const todayString = new Date().toISOString().split('T')[0];
                getEl('cicloVegetativeStartDate').value = todayString;
                getEl('cicloFloweringStartDate').value = todayString;
            }

            updateCicloModalDateFields();
            getEl('cicloModal').style.display = 'flex';
        }

        function updateCicloModalDateFields() {
            const selectedPhase = getEl('cicloPhase').value;
            const vegeInput = getEl('cicloVegetativeStartDate');
            const floraInput = getEl('cicloFloweringStartDate');

            getEl('cicloVegetativeDateContainer').style.display = selectedPhase === 'Vegetativo' ? 'block' : 'none';
            vegeInput.required = selectedPhase === 'Vegetativo';

            getEl('cicloFloweringDateContainer').style.display = selectedPhase === 'Floración' ? 'block' : 'none';
            floraInput.required = selectedPhase === 'Floración';
        }

        async function handleCicloFormSubmit(e) {
            e.preventDefault();
            const cicloId = getEl('cicloIdInput').value;
            const phase = getEl('cicloPhase').value;

            const data = {
                name: getEl('cicloName').value.trim(),
                salaId: getEl('cicloSala').value,
                phase: phase,
                vegetativeStartDate: getEl('cicloVegetativeStartDate').value,
                floweringStartDate: getEl('cicloFloweringStartDate').value,
            };

            if (!data.name || !data.salaId) {
                showNotification("El nombre y la sala son obligatorios.", "error");
                return;
            }

            if (data.phase === 'Vegetativo') {
                data.floweringStartDate = null;
                if (!data.vegetativeStartDate) {
                    showNotification("Debes seleccionar una fecha de inicio para Vegetativo.", "error");
                    return;
                }
            } else { // 'Floración'
                data.vegetativeStartDate = null;
                if (!data.floweringStartDate) {
                    showNotification("Debes seleccionar una fecha de inicio para Floración.", "error");
                    return;
                }
            }

            try {
                if (cicloId) {
                    const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
                    const existingCiclo = currentCiclos.find(c => c.id === cicloId);
                    
                    if (existingCiclo && existingCiclo.phase === 'Vegetativo' && data.phase === 'Floración') {
                         data.floweringWeeks = generateStandardWeeks();
                    } else {
                        data.floweringWeeks = existingCiclo.floweringWeeks || [];
                    }
                    await updateDoc(cicloRef, data);

                } else {
                    data.cultivationType = 'Sustrato';
                    data.genetics = [];
                    data.createdAt = serverTimestamp();
                    if (data.phase === 'Floración') {
                        data.floweringWeeks = generateStandardWeeks();
                    } else {
                        data.floweringWeeks = [];
                    }
                    const ciclosRef = collection(db, `users/${userId}/ciclos`);
                    await addDoc(ciclosRef, data);
                }
                getEl('cicloModal').style.display = 'none';
                showNotification("Ciclo guardado con éxito.", "success");
            } catch (error) {
                console.error("Error al guardar el ciclo: ", error);
                showNotification("No se pudo guardar el ciclo.", "error");
            }
        }

        function deleteCiclo(cicloId, cicloName) {
            showConfirmationModal(`¿Estás seguro de eliminar el ciclo "${cicloName}"?`, async () => {
                try {
                    const logsRef = collection(db, `users/${userId}/ciclos/${cicloId}/logs`);
                    const logsSnapshot = await getDocs(logsRef);
                    const batch = writeBatch(db);
                    logsSnapshot.forEach(doc => batch.delete(doc.ref));
                    await batch.commit();

                    const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
                    await deleteDoc(cicloRef);
                    showNotification("Ciclo eliminado.", "success");
                } catch (error) {
                    console.error("Error deleting ciclo:", error);
                    showNotification("No se pudo eliminar el ciclo.", "error");
                }
            });
        }
        
        function openMoveCicloModal(cicloId) {
            const ciclo = currentCiclos.find(c => c.id === cicloId);
            if (!ciclo) return;
            getEl('moveCicloIdInput').value = cicloId;
            const select = getEl('moveCicloSalaSelect');
            select.innerHTML = '';
            currentSalas.filter(s => s.id !== ciclo.salaId).forEach(s => {
                const option = document.createElement('option');
                option.value = s.id;
                option.innerText = s.name;
                select.appendChild(option);
            });
            getEl('moveCicloModal').style.display = 'flex';
        }

        async function handleMoveCicloSubmit(e) {
            e.preventDefault();
            const cicloId = getEl('moveCicloIdInput').value;
            const newSalaId = getEl('moveCicloSalaSelect').value;
            if (!cicloId || !newSalaId) return;

            const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
            await updateDoc(cicloRef, { salaId: newSalaId });
            getEl('moveCicloModal').style.display = 'none';
            showNotification("Ciclo movido de sala.", "success");
        }
        
        // --- VIEW NAVIGATION ---
        function showCiclosView(salaId, salaName) {
            currentSalaId = salaId;
            currentSalaName = salaName;
            
            getEl('app').classList.add('hidden');
            getEl('cicloDetailView').classList.add('hidden');
            getEl('toolsView').classList.add('hidden');
            getEl('ciclosView').classList.remove('hidden');

            getEl('ciclosViewHeader').innerText = `Ciclos en: ${salaName}`;
            const ciclosInSala = currentCiclos.filter(c => c.salaId === salaId);
            
            const ciclosGrid = getEl('ciclosGrid');
            ciclosGrid.innerHTML = '';
            if (ciclosInSala.length === 0) {
                getEl('emptyCiclosState').style.display = 'block';
            } else {
                getEl('emptyCiclosState').style.display = 'none';
                ciclosInSala.forEach(ciclo => {
                    const card = createCicloCard(ciclo);
                    ciclosGrid.appendChild(card);
                });
            }
        }

        function hideCiclosView() {
            getEl('ciclosView').classList.add('hidden');
            getEl('app').classList.remove('hidden');
            currentSalaId = null;
            currentSalaName = null;
        }

        // --- CICLO DETAIL VIEW ---
        
        function showCicloDetails(ciclo) {
            if (ciclo.phase === 'Vegetativo') {
                showVegetativeDetails(ciclo);
            } else if (ciclo.phase === 'Floración') {
                showFloweringDetails(ciclo);
            } else {
                showNotification("Error: El ciclo no tiene una fase válida. Por favor, edítalo.", "error");
                hideCicloDetails();
            }
        }

        function renderGeneticsInCiclo(ciclo) {
            let html = '<h3 class="text-xl font-bold text-white mb-2">Genéticas en este Ciclo</h3>';
            if (!ciclo.genetics || ciclo.genetics.length === 0) {
                html += '<p class="text-gray-400 italic mb-4">Aún no hay genéticas asignadas a este ciclo.</p>';
            } else {
                html += '<div class="grid grid-cols-2 md:grid-cols-4 gap-2 mb-4">';
                ciclo.genetics.forEach(g => {
                    html += `<div class="bg-gray-700 p-2 rounded-md text-center"><span class="font-bold">${g.quantity}x</span> ${g.name}</div>`;
                });
                html += '</div>';
            }
            html += `<button id="addGeneticsToCicloBtn" data-ciclo-id="${ciclo.id}" class="btn-secondary py-2 px-4 rounded-lg text-sm mb-6">Añadir Genéticas al Ciclo</button>`;
            return html;
        }

        function showFloweringDetails(ciclo) {
            const startDateString = ciclo.floweringStartDate;
            const cicloDetailContent = getEl('cicloDetailContent');
            let content = `<div data-ciclo-id="${ciclo.id}"><h2 class="text-3xl font-bold text-white mb-2">${ciclo.name}</h2>`;
            content += `<p class="text-gray-400 mb-6">Inicio de floración: ${startDateString || 'No establecida'}</p>`;
            content += renderGeneticsInCiclo(ciclo);
            content += `<div id="weeksContainer" class="space-y-6">`;
            
            const weeks = ciclo.floweringWeeks || [];

            if (startDateString) {
                 weeks.forEach(week => {
                    const weekInfo = getPhaseInfo(week.phaseName);
                    content += `
                        <div class="card rounded-lg overflow-hidden">
                            <div class="week-header p-4 flex justify-between items-center flex-wrap gap-2">
                                <div><h4 class="text-xl font-bold text-white">Semana ${week.weekNumber}: <span class="px-2 py-0.5 rounded text-sm ${weekInfo.color}">${weekInfo.name}</span></h4></div>
                                <div class="flex items-center gap-2">
                                    <button data-action="add-log" data-ciclo-id="${ciclo.id}" data-week="${week.weekNumber}" class="btn-primary py-1.5 px-3 rounded-lg text-sm flex items-center gap-1.5">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>
                                        Añadir
                                    </button>
                                </div>
                            </div>
                            <div id="logs-week-${week.weekNumber}" class="p-4 space-y-3"><p class="text-gray-500 italic">No hay registros para esta semana.</p></div>
                        </div>`;
                });
            }

            content += `</div>`;
            content += `<div class="mt-8 text-center"><button id="addNewWeekBtn" data-ciclo-id="${ciclo.id}" class="btn-secondary py-2 px-5 rounded-lg">Añadir Semana</button></div></div>`;
            cicloDetailContent.innerHTML = content;
            
            cicloDetailContent.querySelectorAll('[data-action="add-log"]').forEach(btn => btn.addEventListener('click', (e) => openLogModal(e.currentTarget.dataset.cicloId, e.currentTarget.dataset.week, 'Riego')));
            cicloDetailContent.querySelector('#addNewWeekBtn').addEventListener('click', (e) => openAddWeekModal(e.currentTarget.dataset.cicloId));
            cicloDetailContent.querySelector('#addGeneticsToCicloBtn').addEventListener('click', (e) => openAddGeneticsToCicloModal(e.currentTarget.dataset.cicloId));

            loadLogsForCiclo(ciclo.id, weeks.map(w => w.weekNumber));
            getEl('ciclosView').classList.add('hidden');
            getEl('cicloDetailView').classList.remove('hidden');
        }
        
        function showVegetativeDetails(ciclo) {
            const startDateString = ciclo.vegetativeStartDate;
            const cicloDetailContent = getEl('cicloDetailContent');
            let content = `<div data-ciclo-id="${ciclo.id}"><h2 class="text-3xl font-bold text-white mb-2">${ciclo.name} (Vegetativo)</h2>`;
            content += `<p class="text-gray-400 mb-6">Inicio de vegetativo: ${startDateString || 'No establecida'}</p>`;
            content += renderGeneticsInCiclo(ciclo);
            content += `<div id="weeksContainer" class="space-y-6">`;

            const diffDays = calculateDaysSince(startDateString);
            if (diffDays !== null && diffDays > 0) {
                const totalWeeksInVeg = Math.ceil(diffDays / 7);
                for (let i = 1; i <= totalWeeksInVeg; i++) {
                    content += `
                        <div class="card rounded-lg overflow-hidden">
                            <div class="week-header p-4 flex justify-between items-center flex-wrap gap-2">
                                <div><h4 class="text-xl font-bold text-white">Semana ${i} (Vegetativo)</h4></div>
                                <div class="flex items-center gap-2">
                                    <button data-action="add-log" data-ciclo-id="${ciclo.id}" data-week="${i}" class="btn-primary py-1.5 px-3 rounded-lg text-sm flex items-center gap-1.5">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>
                                        Añadir Registro
                                    </button>
                                </div>
                            </div>
                            <div id="logs-week-${i}" class="p-4 space-y-3"><p class="text-gray-500 italic">No hay registros para esta semana.</p></div>
                        </div>`;
                }
                const weekNumbers = Array.from({length: totalWeeksInVeg}, (_, i) => i + 1);
                loadLogsForCiclo(ciclo.id, weekNumbers);
            }

            content += `</div>`;
            content += `<div class="mt-8 text-center"><button id="startFloweringFromDetailBtn" data-ciclo-id="${ciclo.id}" class="bg-pink-600 hover:bg-pink-700 text-white font-bold py-3 px-6 rounded-lg text-lg">Iniciar Floración</button></div></div>`;
            cicloDetailContent.innerHTML = content;

            cicloDetailContent.querySelectorAll('[data-action="add-log"]').forEach(btn => btn.addEventListener('click', (e) => openLogModal(e.currentTarget.dataset.cicloId, e.currentTarget.dataset.week, 'Riego')));
            cicloDetailContent.querySelector('#startFloweringFromDetailBtn').addEventListener('click', (e) => startFlowering(e.currentTarget.dataset.cicloId));
            cicloDetailContent.querySelector('#addGeneticsToCicloBtn').addEventListener('click', (e) => openAddGeneticsToCicloModal(e.currentTarget.dataset.cicloId));
            
            getEl('ciclosView').classList.add('hidden');
            getEl('cicloDetailView').classList.remove('hidden');
        }

        async function startFlowering(cicloId) {
            showConfirmationModal("¿Estás seguro de pasar este ciclo a floración?", async () => {
                const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
                const todayString = new Date().toISOString().split('T')[0];

                try {
                    await updateDoc(cicloRef, {
                        phase: 'Floración',
                        floweringStartDate: todayString,
                        vegetativeStartDate: null,
                        floweringWeeks: generateStandardWeeks()
                    });
                    showNotification("Ciclo pasado a floración.", "success");
                } catch (error) {
                    console.error("Error starting flowering:", error);
                    showNotification("No se pudo iniciar la floración.", "error");
                }
            });
        }

        function hideCicloDetails() {
            if (logsUnsubscribe) logsUnsubscribe();
            getEl('cicloDetailView').classList.add('hidden');
            if (currentSalaId && currentSalaName) {
                showCiclosView(currentSalaId, currentSalaName);
            } else {
                hideCiclosView();
            }
        }
        
        function loadLogsForCiclo(cicloId, weekNumbers) {
            if (logsUnsubscribe) logsUnsubscribe();
            
            const logsRef = collection(db, `users/${userId}/ciclos/${cicloId}/logs`);
            const q = query(logsRef);

            logsUnsubscribe = onSnapshot(q, (snapshot) => {
                weekNumbers.forEach(weekNum => {
                     const logContainer = getEl(`logs-week-${weekNum}`);
                    if(logContainer) {
                          logContainer.innerHTML = `<p class="text-gray-500 italic">No hay registros para esta semana.</p>`;
                    }
                });

                const allLogs = snapshot.docs.map(doc => {
                    const data = doc.data();
                    const logDate = data.date && data.date.toDate ? data.date.toDate() : new Date();
                    return { id: doc.id, ...data, date: logDate };
                });

                allLogs.sort((a, b) => b.date - a.date);

                allLogs.forEach(log => {
                    const logContainer = getEl(`logs-week-${log.week}`);
                    if (logContainer) {
                        if (logContainer.querySelector('p.italic')) {
                            logContainer.innerHTML = '';
                        }
                        const ciclo = currentCiclos.find(c => c.id === cicloId);
                        const logEntry = createLogEntry(log, ciclo);
                        logContainer.appendChild(logEntry);
                    }
                });
            });
        }

        function createLogEntry(log, ciclo) {
            const entry = document.createElement('div');
            const logDate = log.date.toLocaleString('es-AR', { dateStyle: 'short', timeStyle: 'short'});
            const dayTimeInfo = log.day && log.time ? `<span class="font-semibold">${log.day}, ${log.time}</span>` : '';

            let details = '';
            let borderColor = 'border-amber-500';
            
            if (log.type === 'Riego') {
                const title = ciclo.cultivationType === 'Hidroponia' ? 'Control de Solución' : 'Riego';
                details = `<p class="font-semibold text-amber-400">${title}</p>
                                 <div class="text-sm text-gray-300 mt-1 grid grid-cols-2 gap-x-4 gap-y-1">
                                     <span><strong>pH:</strong> ${log.ph || 'N/A'}</span>
                                     <span><strong>EC:</strong> ${log.ec || 'N/A'}</span>
                                 </div>
                                 <div class="text-sm text-gray-300 mt-2"><strong>Fertilizantes:</strong> ${formatFertilizers(log.fertilizers)}</div>`;
            } else if (log.type === 'Control de Plagas') {
                borderColor = 'border-yellow-400';
                details = `<p class="font-semibold text-yellow-400">Control de Plagas</p>
                                 <p class="text-sm text-gray-300 mt-1 whitespace-pre-wrap">${log.notes || 'Sin notas.'}</p>`;
            } else if (log.type === 'Cambio de Solución') {
                borderColor = 'border-blue-400';
                details = `<p class="font-semibold text-blue-400">Cambio de Solución</p>
                                 <div class="text-sm text-gray-300 mt-1 grid grid-cols-2 gap-x-4 gap-y-1">
                                     <span><strong>Litros:</strong> ${log.litros || 'N/A'}</span>
                                     <span><strong>pH:</strong> ${log.ph || 'N/A'}</span>
                                     <span><strong>EC:</strong> ${log.ec || 'N/A'}</span>
                                 </div>
                                 <div class="text-sm text-gray-300 mt-2"><strong>Fertilizantes:</strong> ${formatFertilizers(log.fertilizers)}</div>`;
            } else if (log.type === 'Podas') {
                borderColor = 'border-green-400';
                details = `<p class="font-semibold text-green-400">Poda: ${log.podaType || ''}</p>`;
            }
            
            entry.className = `log-entry p-3 rounded-md ${borderColor}`;
            entry.innerHTML = `
                <div class="flex justify-between items-center">
                    <div>
                        <span class="text-xs text-gray-400">${logDate}</span>
                        <span class="text-xs text-gray-300 ml-2">${dayTimeInfo}</span>
                    </div>
                    <button data-action="delete-log" data-ciclo-id="${ciclo.id}" data-log-id="${log.id}" class="p-1 rounded-md text-gray-500 hover:bg-red-800 hover:text-white transition">
                         <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                    </button>
                </div>
                <div class="mt-2">${details}</div>
            `;

            entry.querySelector('[data-action="delete-log"]').addEventListener('click', (e) => {
                const cicloId = e.currentTarget.dataset.cicloId;
                const logId = e.currentTarget.dataset.logId;
                deleteLog(cicloId, logId);
            });

            return entry;
        }

        function formatFertilizers(ferts) {
            if (!ferts) return 'Ninguno';
            const used = [];
            if (ferts.basesAmount && ferts.basesUnit) {
                used.push(`Bases (${ferts.basesAmount} ${ferts.basesUnit})`);
            }
            if (ferts.enzimas) used.push('Enzimas');
            if (ferts.candy) used.push('Candy');
            if (ferts.bigBud) used.push('BigBud');
            if (ferts.flawlessFinish) used.push('FlawlessFinish');
            if (ferts.foliar && ferts.foliarProduct) {
                used.push(`Foliar (${ferts.foliarProduct})`);
            }
            return used.length > 0 ? used.join(', ') : 'Ninguno';
        }

        // --- LOG MANAGEMENT ---
        
        function openLogModal(cicloId, week, type) {
            getEl('logForm').reset();
            getEl('fertFoliarProduct').classList.add('hidden');
            getEl('logCicloIdInput').value = cicloId;
            getEl('logWeekInput').value = week;
            getEl('logType').value = type;
            
            const ciclo = currentCiclos.find(c => c.id === cicloId);
            const title = getEl('logModalTitle');
            const phLabel = getEl('logPhLabel');
            
            if (type === 'Riego' && ciclo.cultivationType === 'Hidroponia') {
                title.innerText = 'Añadir Control de Solución';
                phLabel.innerText = 'pH de Solución';
            } else {
                title.innerText = 'Añadir Registro';
                phLabel.innerText = 'pH';
            }
            
            toggleLogFields();
            getEl('logModal').style.display = 'flex';
        }
        
        function closeLogModal() {
            getEl('logModal').style.display = 'none';
        }

        function toggleLogFields() {
            const type = getEl('logType').value;
            const detailedLogFields = getEl('detailedLogFields');
            const notesBasedFields = getEl('notesBasedFields');
            const litrosContainer = getEl('litrosContainer');
            const podasFields = getEl('podasFields');
            const clonesSection = getEl('clonesSection');

            detailedLogFields.style.display = (type === 'Riego' || type === 'Cambio de Solución') ? 'block' : 'none';
            notesBasedFields.style.display = type === 'Control de Plagas' ? 'block' : 'none';
            podasFields.style.display = type === 'Podas' ? 'block' : 'none';
            litrosContainer.style.display = type === 'Cambio de Solución' ? 'block' : 'none';
            
            if (type === 'Podas') {
                clonesSection.style.display = getEl('podaType').value === 'Clones' ? 'block' : 'none';
                populateCloneGeneticsDropdown();
            } else {
                clonesSection.style.display = 'none';
            }
        }

        async function handleLogFormSubmit(e) {
            e.preventDefault();
            const cicloId = getEl('logCicloIdInput').value;
            const week = parseInt(getEl('logWeekInput').value);
            const type = getEl('logType').value;
            
            const logData = {
                cicloId: cicloId,
                week: week,
                type: type,
                date: new Date(),
                day: getEl('logDay').value,
                time: getEl('logTime').value,
            };

            if (type === 'Riego' || type === 'Cambio de Solución') {
                logData.ph = getEl('logPh').value;
                logData.ec = getEl('logEc').value;
                logData.fertilizers = {
                    basesAmount: getEl('fertBasesAmount').value,
                    basesUnit: getEl('fertBasesUnit').value,
                    enzimas: getEl('fertEnzimas').checked,
                    candy: getEl('fertCandy').checked,
                    bigBud: getEl('fertBigBud').checked,
                    flawlessFinish: getEl('fertFlawlessFinish').checked,
                    foliar: getEl('fertFoliar').checked,
                    foliarProduct: getEl('fertFoliarProduct').value,
                };
                if (type === 'Cambio de Solución') {
                    logData.litros = getEl('logLitros').value;
                }
            } else if (type === 'Podas') {
                logData.podaType = getEl('podaType').value;

                if (logData.podaType === 'Clones') {
                    const geneticId = getEl('cloneGenetic').value;
                    const quantity = parseInt(getEl('cloneQuantity').value) || 0;
                    if (geneticId && quantity > 0) {
                        const geneticRef = doc(db, `users/${userId}/genetics`, geneticId);
                        await updateDoc(geneticRef, {
                            cloneStock: increment(quantity)
                        });
                    }
                }
            } else { // Control de Plagas
                logData.notes = getEl('logNotes').value;
            }

            const logsRef = collection(db, `users/${userId}/ciclos/${cicloId}/logs`);
            await addDoc(logsRef, logData);
            closeLogModal();
        }

        function deleteLog(cicloId, logId) {
            showConfirmationModal("¿Seguro que quieres eliminar este registro?", async () => {
                const logRef = doc(db, `users/${userId}/ciclos/${cicloId}/logs`, logId);
                await deleteDoc(logRef);
            });
        }

        // --- ADD WEEK MANAGEMENT ---
        function openAddWeekModal(cicloId) {
            getEl('addWeekCicloIdInput').value = cicloId;
            getEl('addWeekModal').style.display = 'flex';
        }

        function closeAddWeekModal() {
            getEl('addWeekModal').style.display = 'none';
        }

        async function handleAddWeekSubmit(e) {
            e.preventDefault();
            const cicloId = getEl('addWeekCicloIdInput').value;
            const ciclo = currentCiclos.find(c => c.id === cicloId);
            if (!ciclo) return;

            const newPhaseName = getEl('addWeekPhase').value;
            const newWeekNumber = (ciclo.floweringWeeks ? ciclo.floweringWeeks.length : 0) + 1;
            
            const newWeek = {
                weekNumber: newWeekNumber,
                phaseName: newPhaseName
            };

            const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
            await updateDoc(cicloRef, {
                floweringWeeks: arrayUnion(newWeek)
            });
            
            closeAddWeekModal();
        }

        // --- GEMINI API INTEGRATION ---
        async function handleSummarizeWeek(dataset) {
            const { cicloId, weekNumber, weekPhase } = dataset;
            const ciclo = currentCiclos.find(c => c.id === cicloId);
            if (!ciclo) return;

            getEl('aiSummaryContent').innerHTML = '<div class="flex justify-center items-center p-8"><div class="spinner"></div></div>';
            getEl('aiSummaryModal').style.display = 'flex';

            const logsRef = collection(db, `users/${userId}/ciclos/${cicloId}/logs`);
            const q = query(logsRef, where("week", "==", parseInt(weekNumber)));
            const logsSnapshot = await getDocs(q);
            
            let logsText = "";
            logsSnapshot.forEach(doc => {
                const log = doc.data();
                const logDate = log.date.toDate ? log.date.toDate() : new Date();
                const dayTime = (log.day && log.time) ? `(${log.day} - ${log.time})` : '';
                logsText += `Registro del ${logDate.toLocaleString()} ${dayTime}:\n`;
                logsText += `Tipo: ${log.type}\n`;
                if (log.type === 'Riego' || log.type === 'Cambio de Solución') {
                    if(log.type === 'Cambio de Solución') {
                        logsText += `  Litros: ${log.litros}\n`;
                    }
                    logsText += `  pH: ${log.ph}, EC: ${log.ec}\n`;
                    logsText += `  Fertilizantes: ${formatFertilizers(log.fertilizers)}\n`;
                } else if (log.type === 'Podas') {
                    logsText += `  Tipo de Poda: ${log.podaType}\n`;
                } else { // Control de Plagas
                    logsText += `  Notas: ${log.notes}\n`;
                }
                logsText += "---\n";
            });

            if (logsSnapshot.empty) {
                logsText = "No se encontraron registros para esta semana.";
            }

            const prompt = `
                Eres un asistente experto en cultivo de cannabis. Analiza los siguientes registros de la semana ${weekNumber} de un cultivo, que se encuentra en la fase de ${weekPhase}. El tipo de cultivo es ${ciclo.cultivationType}.

                Registros de la semana:
                ${logsText}

                Basado en estos datos, proporciona:
                1. Un resumen conciso de las actividades de la semana.
                2. Observaciones clave sobre los parámetros (pH, EC), litros (si aplica), podas y fertilizantes usados.
                3. Recomendaciones o posibles mejoras para la próxima semana, considerando la fase actual.
                
                Sé claro, directo y ofrece consejos prácticos. Formatea tu respuesta en Markdown.
            `;

            try {
                const functionUrl = "https://generatesummary-zfl5g2a53a-uc.a.run.app";

                const response = await fetch(functionUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt: prompt })
                });

                if (!response.ok) {
                    throw new Error(`Cloud Function request failed`);
                }

                const result = await response.json();
                
                if (result.candidates && result.candidates[0].content.parts[0].text) {
                    const text = result.candidates[0].content.parts[0].text;
                    getEl('aiSummaryContent').innerHTML = text.replace(/\n/g, '<br>');
                } else {
                    getEl('aiSummaryContent').innerText = "No se pudo obtener una respuesta de la IA.";
                }
            } catch (error) {
                console.error("Error calling Cloud Function:", error);
                getEl('aiSummaryContent').innerText = "Error al conectar con el servicio de IA.";
            }
        }
        
        // --- TOOLS & SETTINGS VIEW LOGIC ---
        function showToolsView() {
            getEl('app').classList.add('hidden');
            getEl('ciclosView').classList.add('hidden');
            getEl('settingsView').classList.add('hidden');
            getEl('toolsView').classList.remove('hidden');
        }

        function hideToolsView() {
            getEl('toolsView').classList.add('hidden');
            getEl('app').classList.remove('hidden');
        }
        
        function showSettingsView() {
            getEl('app').classList.add('hidden');
            getEl('ciclosView').classList.add('hidden');
            getEl('toolsView').classList.add('hidden');
            getEl('settingsView').classList.remove('hidden');
        }

        function hideSettingsView() {
            getEl('settingsView').classList.add('hidden');
            getEl('app').classList.remove('hidden');
        }

        function switchToolsTab(activeTab) {
            const tabs = {
                genetics: { btn: getEl('geneticsTabBtn'), content: getEl('geneticsContent') },
                stock: { btn: getEl('stockTabBtn'), content: getEl('stockContent') },
                seedBank: { btn: getEl('seedBankTabBtn'), content: getEl('seedBankContent') }
            };

            Object.keys(tabs).forEach(key => {
                const isSelected = key === activeTab;
                tabs[key].content.classList.toggle('hidden', !isSelected);
                tabs[key].btn.classList.toggle('border-amber-500', isSelected);
                tabs[key].btn.classList.toggle('font-semibold', isSelected);
                tabs[key].btn.classList.toggle('text-white', isSelected);
                tabs[key].btn.classList.toggle('text-gray-400', !isSelected);
            });
        }

        // --- GENETICS MANAGEMENT ---
        function loadGenetics() {
            if (!userId) return;
            const geneticsRef = collection(db, `users/${userId}/genetics`);
            const q = query(geneticsRef);

            if (geneticsUnsubscribe) geneticsUnsubscribe();
            geneticsUnsubscribe = onSnapshot(q, (snapshot) => {
                currentGenetics = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderGeneticsList();
                renderStockList();
            });
        }

        function renderGeneticsList() {
            const geneticsList = getEl('geneticsList');
            geneticsList.innerHTML = '';
            if (currentGenetics.length === 0) {
                geneticsList.innerHTML = `<p class="text-center text-gray-500">No hay genéticas guardadas.</p>`;
                return;
            }
            currentGenetics.forEach(g => {
                const geneticCard = document.createElement('div');
                geneticCard.className = 'card p-4 flex justify-between items-center';
                geneticCard.innerHTML = `
                    <div>
                        <p class="font-bold text-lg flex items-center gap-2">
                            ${g.name}
                        </p>
                        <p class="text-sm text-gray-400">${g.parents || ''} | ${g.bank || ''} | ${g.owner || ''}</p>
                    </div>
                    <div class="flex gap-2">
                        <button data-action="edit-genetic" data-id="${g.id}" class="btn-secondary p-2 rounded-lg transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L14.732 3.732z" /></svg>
                        </button>
                        <button data-action="delete-genetic" data-id="${g.id}" class="btn-danger p-2 rounded-lg transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                        </button>
                    </div>
                `;
                geneticsList.appendChild(geneticCard);
            });
            // Add event listeners
            geneticsList.querySelectorAll('[data-action="edit-genetic"]').forEach(btn => btn.addEventListener('click', (e) => editGenetic(e.currentTarget.dataset.id)));
            geneticsList.querySelectorAll('[data-action="delete-genetic"]').forEach(btn => btn.addEventListener('click', (e) => deleteGenetic(e.currentTarget.dataset.id)));
        }

        async function handleGeneticsFormSubmit(e) {
            e.preventDefault();
            const id = getEl('geneticIdInput').value;
            const data = {
                name: getEl('geneticName').value.trim(),
                parents: getEl('geneticParents').value.trim(),
                bank: getEl('geneticBank').value.trim(),
                owner: getEl('geneticOwner').value.trim(),
            };
            if (!data.name) return;

            if (id) { // Update
                const geneticRef = doc(db, `users/${userId}/genetics`, id);
                await updateDoc(geneticRef, data);
            } else { // Create
                data.cloneStock = 0;
                const geneticsRef = collection(db, `users/${userId}/genetics`);
                await addDoc(geneticsRef, data);
            }
            getEl('geneticsForm').reset();
            getEl('geneticIdInput').value = '';
        }

        function editGenetic(id) {
            const genetic = currentGenetics.find(g => g.id === id);
            if (!genetic) return;
            getEl('geneticIdInput').value = genetic.id;
            getEl('geneticName').value = genetic.name;
            getEl('geneticParents').value = genetic.parents;
            getEl('geneticBank').value = genetic.bank;
            getEl('geneticOwner').value = genetic.owner;
            window.scrollTo(0, 0);
        }

        function deleteGenetic(id) {
            showConfirmationModal("¿Seguro que quieres eliminar esta genética?", async () => {
                const geneticRef = doc(db, `users/${userId}/genetics`, id);
                await deleteDoc(geneticRef);
            });
        }

        // --- STOCK MANAGEMENT ---
        function renderStockList() {
            const stockList = getEl('stockList');
            stockList.innerHTML = '';
            if (currentGenetics.length === 0) {
                stockList.innerHTML = `<p class="text-center text-gray-500">Añade genéticas para ver el stock.</p>`;
                return;
            }
            currentGenetics.forEach(g => {
                const stockCard = document.createElement('div');
                stockCard.className = 'card p-4 flex justify-between items-center';
                stockCard.innerHTML = `
                    <div>
                        <p class="font-bold text-lg">${g.name}</p>
                        <p class="text-sm text-gray-400">Clones en stock: <span class="font-bold text-xl text-amber-400">${g.cloneStock || 0}</span></p>
                    </div>
                    <div class="flex items-center gap-2">
                        <button data-action="update-stock" data-id="${g.id}" data-amount="-1" class="btn-secondary rounded-full w-10 h-10 flex items-center justify-center text-2xl">-</button>
                        <button data-action="update-stock" data-id="${g.id}" data-amount="1" class="btn-secondary rounded-full w-10 h-10 flex items-center justify-center text-2xl">+</button>
                    </div>
                `;
                stockList.appendChild(stockCard);
            });
            stockList.querySelectorAll('[data-action="update-stock"]').forEach(btn => btn.addEventListener('click', (e) => updateStock(e.currentTarget.dataset.id, parseInt(e.currentTarget.dataset.amount))));
        }

        async function updateStock(id, amount) {
            const geneticRef = doc(db, `users/${userId}/genetics`, id);
            await updateDoc(geneticRef, {
                cloneStock: increment(amount)
            });
        }
        
        function populateCloneGeneticsDropdown() {
            const select = getEl('cloneGenetic');
            select.innerHTML = '<option value="">Selecciona una genética...</option>';
            currentGenetics.forEach(g => {
                const option = document.createElement('option');
                option.value = g.id;
                option.innerText = g.name;
                select.appendChild(option);
            });
        }
        
        // --- SEED BANK MANAGEMENT ---
        function loadSeeds() {
            if (!userId) return;
            const seedsRef = collection(db, `users/${userId}/seeds`);
            const q = query(seedsRef);

            if (seedsUnsubscribe) seedsUnsubscribe();
            seedsUnsubscribe = onSnapshot(q, (snapshot) => {
                currentSeeds = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderSeedBankList();
            });
        }

        function renderSeedBankList() {
            const seedBankList = getEl('seedBankList');
            seedBankList.innerHTML = '';
            if (currentSeeds.length === 0) {
                seedBankList.innerHTML = `<p class="text-center text-gray-500">No hay semillas en el banco.</p>`;
                return;
            }
            currentSeeds.forEach(s => {
                const seedCard = document.createElement('div');
                seedCard.className = 'card p-4 flex justify-between items-center';
                seedCard.innerHTML = `
                    <div>
                        <p class="font-bold text-lg">${s.name}</p>
                        <p class="text-sm text-gray-400">${s.bank || 'Banco Desconocido'}</p>
                        <p class="text-sm text-gray-400">Cantidad: <span class="font-bold text-amber-400">${s.quantity || 0}</span></p>
                    </div>
                    <div class="flex gap-2">
                        <button data-action="germinate-seed" data-id="${s.id}" class="btn-primary py-2 px-4 rounded-lg text-sm">Germinar</button>
                        <button data-action="delete-seed" data-id="${s.id}" class="btn-danger p-2 rounded-lg transition">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                        </button>
                    </div>
                `;
                seedBankList.appendChild(seedCard);
            });
            seedBankList.querySelectorAll('[data-action="germinate-seed"]').forEach(btn => btn.addEventListener('click', (e) => openGerminateModal(e.currentTarget.dataset.id)));
            seedBankList.querySelectorAll('[data-action="delete-seed"]').forEach(btn => btn.addEventListener('click', (e) => deleteSeed(e.currentTarget.dataset.id)));
        }

        async function handleSeedFormSubmit(e) {
            e.preventDefault();
            const data = {
                name: getEl('seedName').value.trim(),
                bank: getEl('seedBank').value.trim(),
                quantity: parseInt(getEl('seedQuantity').value)
            };
            if (!data.name || !data.quantity || data.quantity < 1) {
                showNotification("Nombre y cantidad son obligatorios.", "error");
                return;
            }
            const seedsRef = collection(db, `users/${userId}/seeds`);
            await addDoc(seedsRef, data);
            getEl('seedForm').reset();
        }

        function deleteSeed(id) {
            showConfirmationModal("¿Seguro que quieres eliminar este lote de semillas?", async () => {
                const seedRef = doc(db, `users/${userId}/seeds`, id);
                await deleteDoc(seedRef);
            });
        }

        function openGerminateModal(id) {
            const seed = currentSeeds.find(s => s.id === id);
            if (!seed) return;
            getEl('germinateSeedForm').reset();
            getEl('germinateSeedIdInput').value = id;
            getEl('germinateCicloName').value = `Germinación ${seed.name}`;
            getEl('germinateQuantity').max = seed.quantity;
            
            const salaSelect = getEl('germinateSalaSelect');
            salaSelect.innerHTML = '';
            currentSalas.forEach(s => {
                const option = document.createElement('option');
                option.value = s.id;
                option.innerText = s.name;
                salaSelect.appendChild(option);
            });

            getEl('germinateSeedModal').style.display = 'flex';
        }

        async function handleGerminateFormSubmit(e) {
            e.preventDefault();
            const seedId = getEl('germinateSeedIdInput').value;
            const quantity = parseInt(getEl('germinateQuantity').value);
            const cicloName = getEl('germinateCicloName').value.trim();
            const salaId = getEl('germinateSalaSelect').value;
            const seed = currentSeeds.find(s => s.id === seedId);

            if (!seed || !cicloName || !salaId || quantity > seed.quantity || quantity < 1) {
                showNotification("Datos inválidos. Revisa la cantidad y el nombre del ciclo.", "error");
                return;
            }

            const todayString = new Date().toISOString().split('T')[0];
            const cicloData = {
                name: cicloName,
                salaId: salaId,
                phase: 'Vegetativo',
                cultivationType: 'Sustrato',
                vegetativeStartDate: todayString,
                genetics: [{ name: seed.name, quantity: quantity }],
                createdAt: serverTimestamp()
            };
            const ciclosRef = collection(db, `users/${userId}/ciclos`);
            await addDoc(ciclosRef, cicloData);

            // Update seed stock
            const seedRef = doc(db, `users/${userId}/seeds`, seedId);
            await updateDoc(seedRef, {
                quantity: increment(-quantity)
            });

            getEl('germinateSeedModal').style.display = 'none';
            hideToolsView();
        }
        
        // --- ADD GENETICS TO CICLO MODAL ---
        function openAddGeneticsToCicloModal(cicloId) {
            getEl('addGeneticsToCicloForm').reset();
            getEl('addGeneticsCicloIdInput').value = cicloId;

            const stockSelect = getEl('addFromStockGenetic');
            stockSelect.innerHTML = '<option value="">Selecciona clon del stock...</option>';
            currentGenetics.filter(g => g.cloneStock > 0).forEach(g => {
                const option = document.createElement('option');
                option.value = g.id;
                option.innerText = `${g.name} (Stock: ${g.cloneStock})`;
                stockSelect.appendChild(option);
            });
            
            getEl('addGeneticsToCicloModal').style.display = 'flex';
        }

        async function handleAddGeneticToCiclo(type) {
            const cicloId = getEl('addGeneticsCicloIdInput').value;
            if (!cicloId) return;

            let geneticName, quantity, geneticId;

            if (type === 'stock') {
                geneticId = getEl('addFromStockGenetic').value;
                const genetic = currentGenetics.find(g => g.id === geneticId);
                if (!genetic) {
                    showNotification("Selecciona una genética válida.", "error");
                    return;
                }
                geneticName = genetic.name;
                quantity = parseInt(getEl('addFromStockQuantity').value);
                if (!quantity || quantity <= 0 || quantity > genetic.cloneStock) {
                    showNotification("Cantidad inválida o excede el stock.", "error");
                    return;
                }
            } else { // new
                geneticName = getEl('addNewGeneticName').value.trim();
                quantity = parseInt(getEl('addNewGeneticQuantity').value);
                if (!geneticName || !quantity || quantity <= 0) {
                    showNotification("Nombre y cantidad son obligatorios.", "error");
                    return;
                }
            }

            const cicloRef = doc(db, `users/${userId}/ciclos`, cicloId);
            await updateDoc(cicloRef, {
                genetics: arrayUnion({ name: geneticName, quantity: quantity })
            });

            if (type === 'stock') {
                // Decrement stock
                const geneticRef = doc(db, `users/${userId}/genetics`, geneticId);
                await updateDoc(geneticRef, {
                    cloneStock: increment(-quantity)
                });
            }
            
            getEl('addGeneticsToCicloModal').style.display = 'none';
        }
        
        // --- CONFIRMATION MODAL ---
        function showConfirmationModal(message, onConfirm) {
            getEl('confirmationMessage').textContent = message;
            confirmCallback = onConfirm;
            getEl('confirmationModal').style.display = 'flex';
        }

        function hideConfirmationModal() {
            getEl('confirmationModal').style.display = 'none';
            confirmCallback = null;
        }

        getEl('confirmActionBtn').addEventListener('click', () => {
            if (confirmCallback) {
                confirmCallback();
            }
            hideConfirmationModal();
        });

        getEl('cancelActionBtn').addEventListener('click', hideConfirmationModal);

        // --- SETTINGS FUNCTIONS (PASSWORD, DELETE ACCOUNT) ---
        async function handleChangePassword(e) {
            e.preventDefault();
            const newPassword = getEl('newPassword').value;
            if (newPassword.length < 6) {
                showNotification("La nueva contraseña debe tener al menos 6 caracteres.", "error");
                return;
            }
            try {
                await updatePassword(auth.currentUser, newPassword);
                showNotification("Contraseña actualizada con éxito.", "success");
                getEl('changePasswordForm').reset();
            } catch (error) {
                console.error("Error updating password:", error);
                showNotification("Error al actualizar la contraseña.", "error");
            }
        }

        function handleDeleteAccount() {
            showConfirmationModal("Esta acción es irreversible. ¿Estás seguro?", async () => {
                try {
                    await deleteUser(auth.currentUser);
                    showNotification("Cuenta eliminada con éxito.", "success");
                } catch (error) {
                    console.error("Error deleting account:", error);
                    showNotification("Error al eliminar la cuenta.", "error");
                }
            });
        }


        // --- GLOBAL EVENT LISTENERS ---
        function initializeAppEventListeners() {
            getEl('logoutBtn').addEventListener('click', () => signOut(auth));

            getEl('menuBtn').addEventListener('click', (e) => {
                e.stopPropagation();
                getEl('dropdownMenu').classList.toggle('hidden');
            });

            window.addEventListener('click', (e) => {
                const menuBtn = getEl('menuBtn');
                const dropdownMenu = getEl('dropdownMenu');
                if (menuBtn && dropdownMenu && !dropdownMenu.contains(e.target) && !menuBtn.contains(e.target)) {
                    dropdownMenu.classList.add('hidden');
                }
            });

            getEl('aboutBtn').addEventListener('click', () => getEl('aboutModal').style.display = 'flex');
            
            getEl('menuAddSala').addEventListener('click', (e) => {
                e.preventDefault();
                openSalaModal();
                getEl('dropdownMenu').classList.add('hidden');
            });
            
            getEl('menuAddCiclo').addEventListener('click', (e) => {
                e.preventDefault();
                openCicloModal();
                getEl('dropdownMenu').classList.add('hidden');
            });

            getEl('menuTools').addEventListener('click', (e) => {
                e.preventDefault();
                showToolsView();
                getEl('dropdownMenu').classList.add('hidden');
            });
            
            getEl('menuSettings').addEventListener('click', (e) => {
                e.preventDefault();
                showSettingsView();
                getEl('dropdownMenu').classList.add('hidden');
            });
            
            getEl('backToPanelBtn').addEventListener('click', hideToolsView);
            getEl('backToSalasBtn').addEventListener('click', hideCiclosView);
            getEl('geneticsTabBtn').addEventListener('click', () => switchToolsTab('genetics'));
            getEl('stockTabBtn').addEventListener('click', () => switchToolsTab('stock'));
            getEl('seedBankTabBtn').addEventListener('click', () => switchToolsTab('seedBank'));
            getEl('geneticsForm').addEventListener('submit', handleGeneticsFormSubmit);
            getEl('seedForm').addEventListener('submit', handleSeedFormSubmit);

            getEl('cancelSalaBtn').addEventListener('click', () => getEl('salaModal').style.display = 'none');
            getEl('salaForm').addEventListener('submit', handleSalaFormSubmit);

            getEl('cancelCicloBtn').addEventListener('click', () => getEl('cicloModal').style.display = 'none');
            getEl('cicloForm').addEventListener('submit', handleCicloFormSubmit);
            getEl('cicloPhase').addEventListener('change', updateCicloModalDateFields); // <-- HOTFIX
            
            getEl('backToCiclosBtn').addEventListener('click', hideCicloDetails);
            
            getEl('cancelLogBtn').addEventListener('click', closeLogModal);
            getEl('logForm').addEventListener('submit', handleLogFormSubmit);
            getEl('logType').addEventListener('change', toggleLogFields);

            getEl('cancelAddWeekBtn').addEventListener('click', closeAddWeekModal);
            getEl('addWeekForm').addEventListener('submit', handleAddWeekSubmit);
            
            getEl('closeAiSummaryBtn').addEventListener('click', () => {
                getEl('aiSummaryModal').style.display = 'none';
            });
            
            getEl('fertFoliar').addEventListener('change', (e) => {
                getEl('fertFoliarProduct').classList.toggle('hidden', !e.target.checked);
            });
            
            getEl('podaType').addEventListener('change', () => {
                getEl('clonesSection').style.display = getEl('podaType').value === 'Clones' ? 'block' : 'none';
            });

            getEl('cancelGerminateBtn').addEventListener('click', () => getEl('germinateSeedModal').style.display = 'none');
            getEl('germinateSeedForm').addEventListener('submit', handleGerminateFormSubmit);

            getEl('cancelMoveCicloBtn').addEventListener('click', () => getEl('moveCicloModal').style.display = 'none');
            getEl('moveCicloForm').addEventListener('submit', handleMoveCicloSubmit);

            getEl('backToPanelFromSettingsBtn').addEventListener('click', hideSettingsView);
            getEl('changePasswordForm').addEventListener('submit', handleChangePassword);
            getEl('deleteAccountBtn').addEventListener('click', handleDeleteAccount);

            getEl('closeAddGeneticsBtn').addEventListener('click', () => getEl('addGeneticsToCicloModal').style.display = 'none');
            getEl('addFromStockBtn').addEventListener('click', () => handleAddGeneticToCiclo('stock'));
            getEl('addNewGeneticBtn').addEventListener('click', () => handleAddGeneticToCiclo('new'));
        }

    </script>